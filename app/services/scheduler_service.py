"""
Service para agendamento de tarefas com APScheduler
Executa sincroniza√ß√£o di√°ria das filiais
"""

import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

from app.models.sync_log import SyncLog
from app.services.sync_service import ProtheusSyncService
from app.config.settings import settings

# Configurar logging
logger = logging.getLogger(__name__)


class SchedulerService:
    """
    Service para gerenciar tarefas agendadas
    """
    
    def __init__(self):
        """Inicializa o scheduler"""
        self.scheduler = AsyncIOScheduler()
        self.is_running = False
    
    def start(self):
        """
        Inicia o scheduler e configura as tarefas
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è Scheduler j√° est√° rodando")
            return
        
        try:
            # Configurar job de sincroniza√ß√£o di√°ria
            # Executa todos os dias √†s 03:00 AM (hor√°rio de menor movimento)
            self.scheduler.add_job(
                func=self.sync_branches_job,
                trigger=CronTrigger(hour=3, minute=0),
                id='sync_branches_daily',
                name='Sincroniza√ß√£o di√°ria de filiais',
                replace_existing=True,
                misfire_grace_time=3600  # 1 hora de toler√¢ncia
            )
            
            # Iniciar scheduler
            self.scheduler.start()
            self.is_running = True
            
            logger.info("‚úÖ Scheduler iniciado com sucesso")
            logger.info("üìÖ Sincroniza√ß√£o agendada para 03:00 AM diariamente")
            
            # Listar jobs agendados
            jobs = self.scheduler.get_jobs()
            for job in jobs:
                logger.info(f"   üìå Job: {job.name} - Pr√≥xima execu√ß√£o: {job.next_run_time}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar scheduler: {str(e)}")
            raise
    
    def stop(self):
        """
        Para o scheduler
        """
        if not self.is_running:
            return
        
        try:
            self.scheduler.shutdown()
            self.is_running = False
            logger.info("üõë Scheduler parado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao parar scheduler: {str(e)}")
    
    def sync_branches_job(self):
        """
        Job de sincroniza√ß√£o de filiais
        Executa em modo s√≠ncrono para compatibilidade com APScheduler
        """
        logger.info("=" * 60)
        logger.info("üîÑ INICIANDO JOB DE SINCRONIZA√á√ÉO AUTOM√ÅTICA")
        logger.info(f"üìÖ Data/Hora: {datetime.now()}")
        logger.info("=" * 60)
        
        # Criar conex√£o direta com banco para job
        from app.config.database import SessionLocal
        
        db = SessionLocal()
        sync_log = None
        
        try:
            # Criar log de sincroniza√ß√£o
            sync_log = SyncLog(
                sync_type="branches",
                started_at=datetime.now(),
                status="running",
                triggered_by="scheduler",
                user_id="system"
            )
            db.add(sync_log)
            db.commit()
            db.refresh(sync_log)
            
            logger.info(f"üìù Log de sincroniza√ß√£o criado: ID {sync_log.id}")
            
            # Executar sincroniza√ß√£o
            service = ProtheusSyncService()
            stats = service.sync_branches()
            
            # Atualizar log com resultado
            sync_log.finished_at = datetime.now()
            sync_log.duration_seconds = int((sync_log.finished_at - sync_log.started_at).total_seconds())
            sync_log.status = stats.get("status", "error")
            sync_log.records_processed = stats.get("branches_processed", 0)
            sync_log.records_created = stats.get("branches_created", 0)
            sync_log.records_updated = stats.get("branches_updated", 0)
            sync_log.records_failed = len(stats.get("errors", []))
            sync_log.details = stats
            
            if stats.get("errors"):
                sync_log.error_message = "; ".join(stats["errors"][:5])
            
            db.commit()
            
            logger.info("=" * 60)
            logger.info("‚úÖ JOB DE SINCRONIZA√á√ÉO CONCLU√çDO")
            logger.info(f"   Status: {sync_log.status}")
            logger.info(f"   Dura√ß√£o: {sync_log.duration_seconds} segundos")
            logger.info(f"   Filiais processadas: {sync_log.records_processed}")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå Erro no job de sincroniza√ß√£o: {str(e)}")
            
            # Atualizar log com erro
            if sync_log:
                sync_log.finished_at = datetime.now()
                sync_log.duration_seconds = int((sync_log.finished_at - sync_log.started_at).total_seconds())
                sync_log.status = "error"
                sync_log.error_message = str(e)
                db.commit()
            
        finally:
            db.close()
    
    def get_jobs(self):
        """
        Retorna lista de jobs agendados
        """
        jobs = []
        for job in self.scheduler.get_jobs():
            jobs.append({
                "id": job.id,
                "name": job.name,
                "next_run": job.next_run_time,
                "trigger": str(job.trigger)
            })
        return jobs
    
    def trigger_job(self, job_id: str):
        """
        Executa um job manualmente
        """
        try:
            job = self.scheduler.get_job(job_id)
            if job:
                job.func()
                logger.info(f"‚úÖ Job {job_id} executado manualmente")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Job {job_id} n√£o encontrado")
                return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar job {job_id}: {str(e)}")
            return False


# Inst√¢ncia global do scheduler
scheduler_service = SchedulerService()